[gd_scene load_steps=11 format=2]

[ext_resource path="res://src/effect/time_bubble.gd" type="Script" id=1]
[ext_resource path="res://art/projectile/kenney_particlePack_1.1/circle_03.png" type="Texture" id=2]

[sub_resource type="CircleShape2D" id=1]

[sub_resource type="Shader" id=10]
code = "/* 
Earthbound battle backgrounds shader with scrolling effect and palette cycling like in the original game.
@retr0_dev
	
Apply the shader to a TextureRect or a Sprite. Use a texture with some shapes in a transparent background for best results.
You can then use a ColorRect or another method to paint the background.
You can use the shader on multiple TextureRects and obtain a double-buffer effect tweaking the values for each one, remember to Make Unique the shader material.
*/
shader_type canvas_item;

uniform float screen_height = 1024.0;
uniform float amplitude = 0.075;
uniform float frequency = 250.0;
uniform float speed = 2.0;
uniform float amplitude_vertical = 0.0;
uniform float frequency_vertical = 0.0;
uniform float speed_vertical = 0.0;
uniform vec2 scroll_direction = vec2(0.0, 0.0);
uniform float scrolling_speed = 0.02;
uniform bool enable_palette_cycling = false;
uniform sampler2D palette;
uniform float palette_speed = 0.1;

void fragment()
{
	float diff_x = amplitude * sin((frequency * UV.x) + (speed * TIME));
	float diff_y = amplitude_vertical * sin((frequency_vertical * UV.y)  + (speed_vertical * TIME));
	vec2 scroll = scroll_direction * TIME * scrolling_speed;
	vec4 tex = texture(TEXTURE, vec2(UV.x + diff_x, UV.y + diff_y) + scroll);
	float palette_swap = mod(tex.r - TIME * palette_speed, 1.0);
	
	if (enable_palette_cycling)
	{
		COLOR = vec4(texture(palette, vec2(palette_swap, 0)).rgb, tex.a);
	}
	else COLOR = tex;
	COLOR = mix(vec4(0.0), COLOR, float(int(UV.y * screen_height) % 2));
}"

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )
shader_param/screen_height = 1920.0
shader_param/amplitude = 0.03
shader_param/frequency = 25.0
shader_param/speed = 2.0
shader_param/amplitude_vertical = 0.03
shader_param/frequency_vertical = 25.0
shader_param/speed_vertical = 0.0
shader_param/scroll_direction = Vector2( 0, 0 )
shader_param/scrolling_speed = 0.02
shader_param/enable_palette_cycling = false
shader_param/palette_speed = 0.1

[sub_resource type="StreamTexture" id=9]
flags = 4
load_path = "res://.import/circle_03.png-8bc127d8f1beb53cf6718fc4219169ea.stex"

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

uniform float max_blend : hint_range(0,1) = 0.5;
uniform float rotation_offset = 0;
uniform float intensity : hint_range(0, 10);
uniform bool invert = false;
uniform vec2 rel_rect_size = vec2(1024, 600);

float distFromCen(vec2 p) {
	return distance(p, vec2(0.5));
}
//rotates by angle radians
vec2 rotate(vec2 p, float angle){
	return vec2(cos(angle)*p.x-sin(angle)*p.y, sin(angle)*p.x + cos(angle)*p.y);
	}

void fragment() {
	vec4 c = COLOR;
	
	float distMod = invert ? distFromCen(UV) : 0.5 - distFromCen(UV);
	float angle = intensity * distMod * 6.28318 + rotation_offset;
	vec2 newp = rotate(UV-vec2(0.5), angle) + vec2(0.5);
	vec2 disp = (newp - UV) * rel_rect_size * SCREEN_PIXEL_SIZE;
	disp.y = -disp.y; // for some reason UV and SCEEN_UV are inveresed
	COLOR = mix(texture(SCREEN_TEXTURE, SCREEN_UV + disp), c, max_blend * 2.0 * (0.5-distFromCen(UV)));
	//COLOR = c;
	//Doesn'[t apply effect outside of circle]
	if (distFromCen(UV) > 0.5) {
		COLOR = texture(SCREEN_TEXTURE, SCREEN_UV);
	}
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/max_blend = 0.0
shader_param/rotation_offset = -2.0
shader_param/intensity = 5.0
shader_param/invert = true
shader_param/rel_rect_size = Vector2( 1024, 600 )

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

uniform float outline_width = 200.5;
uniform vec4 outline_color: hint_color;
uniform sampler2D noise : hint_black;

void fragment() {
    vec4 col = texture(TEXTURE, UV);
    vec2 ps = TEXTURE_PIXEL_SIZE;
    float a;
    float maxa = col.a;
    float mina = col.a;

    float ow = outline_width + texture(noise, UV + vec2(0.0, -TIME)).r * 20.0;

    a = texture(TEXTURE, UV + vec2(0.0, -ow) * ps).a;
    maxa = max(a, maxa);
    mina = min(a, mina);

    a = texture(TEXTURE, UV + vec2(0.0, ow) * ps).a;
    maxa = max(a, maxa);
    mina = min(a, mina);

    a = texture(TEXTURE, UV + vec2(-ow, 0.0) * ps).a;
    maxa = max(a, maxa);
    mina = min(a, mina);

    a = texture(TEXTURE, UV + vec2(ow, 0.0) * ps).a;
    maxa = max(a, maxa);
    mina = min(a, mina);

    COLOR = mix(col, outline_color, maxa - mina);
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/outline_width = 2.0
shader_param/outline_color = null

[node name="TimeBubbleZone" type="Node2D"]
visible = false
modulate = Color( 1, 1, 1, 0.392157 )
position = Vector2( 347.963, 326.636 )
z_index = 3000
z_as_relative = false
script = ExtResource( 1 )

[node name="DebuggingRect" type="ColorRect" parent="."]
visible = false
modulate = Color( 0.431373, 0.431373, 1, 0.0980392 )
margin_right = 255.0
margin_bottom = 255.0
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Area2D" type="Area2D" parent="."]
collision_layer = 32
collision_mask = 15

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource( 1 )

[node name="EarthboundWaveEdgeSprite" type="Sprite" parent="."]
modulate = Color( 0.607843, 0.607843, 1, 0.607843 )
material = SubResource( 11 )
texture = ExtResource( 2 )
__meta__ = {
"_editor_description_": ""
}

[node name="ThickBorder" type="Sprite" parent="."]
modulate = Color( 0.0980392, 0.0980392, 0.294118, 0.588235 )
scale = Vector2( 1.25, 1.25 )
texture = SubResource( 9 )

[node name="DistortionSprite" type="Sprite" parent="."]
self_modulate = Color( 1, 1, 1, 0.607843 )
material = SubResource( 3 )
texture = ExtResource( 2 )

[node name="RipplingBorderSprite" type="Sprite" parent="DistortionSprite"]
modulate = Color( 0.294118, 0.294118, 0.588235, 0.588235 )
self_modulate = Color( 1, 1, 1, 0.607843 )
material = SubResource( 5 )
scale = Vector2( 1.25, 1.25 )
texture = SubResource( 9 )

[node name="AnimationTween" type="Tween" parent="."]

[node name="LifespanTimer" type="Timer" parent="."]
one_shot = true
[connection signal="area_shape_entered" from="Area2D" to="." method="_on_Area2D_area_shape_entered"]
[connection signal="area_shape_exited" from="Area2D" to="." method="_on_Area2D_area_shape_exited"]
[connection signal="body_entered" from="Area2D" to="." method="_on_Area2D_body_entered"]
[connection signal="body_exited" from="Area2D" to="." method="_on_Area2D_body_exited"]
[connection signal="tween_completed" from="AnimationTween" to="." method="_on_AnimationTween_tween_completed"]
[connection signal="timeout" from="LifespanTimer" to="." method="_on_LifespanTimer_timeout"]
